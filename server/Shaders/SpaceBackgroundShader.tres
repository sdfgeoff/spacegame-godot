[gd_resource type="Shader" format=3 uid="uid://b0fxosaerti2v"]

[resource]
code = "
// NOTE: Shader automatically converted from Godot Engine 4.1.1.stable's ProceduralSkyMaterial.

shader_type sky;
render_mode use_debanding;

uniform sampler2D skyboxTexture;
uniform vec3 stars_color : source_color = vec3(1.0, 0.5, 0.2);
uniform vec3 clouds_color : source_color = vec3(1.0, 0.5, 0.2);

const float texScale = 2.0;

const float STAR_RADIUS = 1.0;
const float STAR_GAMMA = 10.0;

uniform vec2 SCREEN_RESOLUTION = vec2(640, 480);
uniform float FOV = 0.1;



vec4 hash43(vec3 p)
{
	vec4 p4 = fract(vec4(p.xyzx)  * vec4(.1031, .1030, .0973, .1099));
    p4 += dot(p4, p4.wzxy+33.33);
    return fract((p4.xxyz+p4.yzzw)*p4.zywx);
}


// Converts from a 3D direction vector into a 2D UV map with equal(ish) area
// The UV is not constrained to the 0-1 range
vec2 to_cells(vec3 rayDirection) {
	// Cubemap
	rayDirection = rayDirection.xzy * vec3(1,1,-1);
	vec3 norm = normalize(rayDirection);
	vec3 absnorm = abs(norm);
	vec2 uv = vec2(0,0);
	vec2 face = vec2(0.0);
	if (absnorm.x / absnorm.z < 1.0 && absnorm.y / absnorm.z < 1.0) {
		if (norm.z > 0.0) {
			// Down
			face = vec2(0.0, 4.0);
			uv = norm.yx / absnorm.z * vec2(1.0, -1.0);
		} else {
			// Up
			face = vec2(0.0, -4.0);
			uv = norm.yx / absnorm.z;
		}
	} else if (absnorm.x / absnorm.y < 1.0 && absnorm.z / absnorm.y < 1.0) {
		if (norm.y > 0.0) {
			// Front
			face = vec2(1.0, 0.0);
			uv = norm.xz / absnorm.y * vec2(-1.0, 1.0);
		} else {
			// Back0.
			face = vec2(-1.0, 0.0);
			uv = norm.xz / absnorm.y;
		}
	} else {
		if (norm.x > 0.0) {
			// Lefet
			face = vec2(0.0, 0.0);
			uv = (norm.yz / absnorm.x);
		} else {
			// Right
			face = vec2(-1.0, -1.0);
			uv = (norm.yz / absnorm.x) * vec2(-1.0, 1.0);
		}
	}

    // Inflate the cube to reduce distortion due to corners.
    // I kinda stubled over this one experimentally, no idea if it has a name, but
    // it works quite well at making the cells closer to equal area.
    // It's probably got a name.
    //float d_edge = 2.0 - max(abs(uv.x), abs(uv.y));
    //uv *= sqrt(d_edge);

    return (uv * 0.499 * (1.0/3.0) + 0.5) + face / 3.0;
}

vec4 sampleSkybox(vec2 cellId) {
	return textureLod(skyboxTexture, cellId, 0.0);
}


vec3 stars(vec2 uv, float lens, float seed, float numCells) {
    vec2 rawCells = uv * numCells;
    vec2 cellId = floor(rawCells);

    float starDensity = pow(1.0 - sampleSkybox(cellId / numCells).a, 2.0);

	vec2 innerCoords = fract(rawCells);

    vec4 offsets = hash43(vec3(cellId, seed));
    innerCoords += (offsets.xy - 0.5) * 1.0;
    innerCoords = abs(innerCoords - 0.5) * 2.0;

    float dist = length(innerCoords) * SCREEN_RESOLUTION.y;
    float radius = max(1.0 - dist / (numCells * FOV * STAR_RADIUS), 0.0);
    float intensity = pow(radius, 4.0); // Falloff - bright in center
    intensity *= pow(offsets.w, STAR_GAMMA); // more dim stars than bright ones
    intensity *= step(offsets.z, starDensity);
	// return vec3(starDensity);

    return intensity * mix(
        stars_color,
        clouds_color,
        offsets.z
    ) * 1.0;
}







void sky() {
	vec3 direction = EYEDIR;

	vec3 steps = step(0.0, direction) * 0.5;
	vec2 cells = to_cells(direction);
	vec4 skybox = sampleSkybox(cells);
	skybox.rgb = pow(skybox.rgb, vec3(2.2)); // Gamma correct

	float clouds = (1.0 - skybox.a) * 0.2;
	vec3 cloudsCol = clouds * vec3(clouds_color);

	vec3 starsCol = vec3(0.0);
    starsCol += stars(cells, FOV, 1.0, 600.0) * 1.0;
    //starsCol += stars(cells, FOV, 2.0, 700.0) * 0.8;
    //starsCol += stars(cells, FOV, 3.0, 800.0) * 0.7;
    starsCol += stars(cells, FOV, 4.0, 800.0) * 0.8;
    starsCol += stars(cells, FOV, 5.0, 700.0) * 0.5;

	float sunOuterSize = 0.005;
	float sunInnerSize = 0.2;
	float sun = (dot(LIGHT0_DIRECTION, EYEDIR)  - 1.0 + sunOuterSize) / sunOuterSize;
	sun = clamp(sun / sunInnerSize, 0.0, 1.0);
	sun = pow(sun, 4.0);

	vec3 c2 = LIGHT0_COLOR * LIGHT0_COLOR * LIGHT0_ENERGY;

	vec3 sunCol = sun * c2;

	COLOR = starsCol + cloudsCol + sunCol + skybox.rgb * 2.0;
}
"
