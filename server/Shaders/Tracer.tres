[gd_resource type="Shader" format=3 uid="uid://bdj3bqv1hqe4g"]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx,shadows_disabled;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;

uniform vec3 uv1_scale = vec3(0.25);
uniform vec3 uv1_offset;
uniform float emission_strength = 10.0;


varying vec3 scale;
varying vec4 trace_col;

void light() {}

void vertex() {
	float trace_length = INSTANCE_CUSTOM.r;
	float trace_width = INSTANCE_CUSTOM.g;
	float trace_hue = INSTANCE_CUSTOM.b;

	UV=UV*uv1_scale.xy+uv1_offset.xy;
	VERTEX.y = VERTEX.y - (trace_length - 1.0) * COLOR.r;
	VERTEX.xz = VERTEX.xz * trace_width;
	
	trace_col = vec4(
		vec3(0.3) + vec3(0.5) * cos(2.0 * PI * (vec3(1.0) * trace_hue+vec3(0.0, 0.333, 0.667))),
		1.0
	);
}


void fragment() {
		
		
	float viewAngle = pow(dot(NORMAL, VIEW), COLOR.g) ;
	viewAngle *= viewAngle;
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	float intensity = albedo_tex.r;
	
	float alpha = intensity * viewAngle;
	
	vec4 color = trace_col;
	
	ALBEDO = color.rgb; //albedo.rgb;
	EMISSION = color.rgb * intensity * emission_strength;
	ALPHA *= intensity * color.a * alpha;
}
"
